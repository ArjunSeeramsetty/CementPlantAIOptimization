# .github/workflows/ci.yml
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.9"
  PROJECT_ID: "cement-ai-opt-38517"

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 pytest pytest-cov black mypy
        
    - name: Code formatting check with Black
      run: |
        black --check --diff src/
        
    - name: Lint with flake8
      run: |
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Type checking with mypy
      run: |
        mypy src/ --ignore-missing-imports --no-strict-optional
        
    - name: Run tests with pytest
      run: |
        # Create tests directory if it doesn't exist
        mkdir -p tests
        # Run our production enhancement tests
        python scripts/test_production_enhancements.py
        # Run main platform tests
        python scripts/test_jk_cement_platform.py
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        
    - name: Security scan with Bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        
    - name: Dependency vulnerability scan with Safety
      run: |
        safety check --json --output safety-report.json || true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  terraform-validate:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
        
    - name: Terraform Format Check
      run: terraform fmt -check -recursive terraform/
      
    - name: Terraform Init
      run: |
        cd terraform/
        terraform init -backend=false
        
    - name: Terraform Validate
      run: |
        cd terraform/
        terraform validate

  build-and-package:
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-scan, terraform-validate]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine docker
        
    - name: Build Python package
      run: |
        python -m build
        
    - name: Check package
      run: |
        twine check dist/*
        
    - name: Build Docker image
      run: |
        docker build -t cement-ai-platform:${{ github.sha }} .
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          dist/
          Dockerfile
          requirements.txt
          setup.py

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-package
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}
        
    - name: Configure Docker
      run: gcloud auth configure-docker
      
    - name: Build and push Docker image
      run: |
        docker build -t gcr.io/${{ env.PROJECT_ID }}/cement-ai-platform:staging .
        docker push gcr.io/${{ env.PROJECT_ID }}/cement-ai-platform:staging
        
    - name: Deploy to Cloud Run (Staging)
      run: |
        gcloud run deploy cement-ai-platform-staging \
          --image gcr.io/${{ env.PROJECT_ID }}/cement-ai-platform:staging \
          --platform managed \
          --region us-central1 \
          --allow-unauthenticated

  deploy-production:
    runs-on: ubuntu-latest
    needs: build-and-package
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}
        
    - name: Configure Docker
      run: gcloud auth configure-docker
      
    - name: Build and push Docker image
      run: |
        docker build -t gcr.io/${{ env.PROJECT_ID }}/cement-ai-platform:latest .
        docker push gcr.io/${{ env.PROJECT_ID }}/cement-ai-platform:latest
        
    - name: Deploy to Cloud Run (Production)
      run: |
        gcloud run deploy cement-ai-platform \
          --image gcr.io/${{ env.PROJECT_ID }}/cement-ai-platform:latest \
          --platform managed \
          --region us-central1 \
          --allow-unauthenticated
          
    - name: Run smoke tests
      run: |
        # Add smoke tests here
        echo "Running smoke tests..."
